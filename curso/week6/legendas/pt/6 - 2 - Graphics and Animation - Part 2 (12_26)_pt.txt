Se você quiser desenhar gráficos mais complexos e você deseja atualizar os gráficos com freqüência, então você pode fazer o seu desenho com uma lona. Agora, como eu disse anteriormente, uma tela é uma espécie de contexto ou mecanismo para a elaboração de um bitmap subjacente.

E você pode acessar uma tela ou através de uma visão objeto genérico ou através de uma subclasse vista especial chamado SurfaceView. Normalmente, você vai desenhar através de uma visão genérica quando as atualizações são menos freqüentes, e se você tomar essa atitude, o aplicativo deve criar uma exibição personalizada subclasse.

E, em seguida, o sistema fornecerá a tela para a visualização através de uma chamada ao seu método onDraw. Se, em vez disso, seu aplicativo precisa atualizar com freqüência seus gráficos, então você pode considerar desenho através de um SurfaceView. Com essa abordagem, o aplicativo cria um costume, SurfaceView subclasse.

E que também irá criar um thread secundário com que as operações de desenho em que SurfaceView, será realizada. Em tempo de execução, o aplicativo pode então adquirir a sua própria tela, E, portanto, exercer mais controle sobre como e quando ocorre desenho.

O próximo exemplo de aplicação é chamado GraphicsCanvasBubble. E a idéia por trás deste aplicativo é que ele vai chamar um ponto de vista e, em seguida, atualizar essa visão. Mas as atualizações são um pouco freqüentes, a cada segundo ou assim.

Assim, esta aplicação tem uma rosca interna que acorda uma vez a cada segundo ou assim, e move a vista. E, em seguida, usa uma tela como se redesenha a vista em sua nova localização. Vamos ver isso em ação. Então aqui está o meu dispositivo.

E agora, vou iniciar a aplicação GraphicsCanvasBubble. O aplicativo é iniciado com uma bolha tirada em um local selecionado de forma aleatória. E cada segundo ou assim, você pode ver que a bolha está apagado, movido e, em seguida, redesenhado em sua nova localização.

Vamos olhar para o código-fonte para esta aplicação. Então aqui está a aplicação GraphicsCanvasBubble aberto no IDE. Agora, eu vou abrir a atividade principal. Aqui você pode ver que a aplicação carrega um bitmap a partir do diretório de recursos.

E então ele usa esse bitmap para criar uma instância de uma classe de exibição personalizada chamado BubbleView. Em seguida, o código adiciona a instância BubbleView ao layout. E em seguida, ele cria e inicia um novo segmento. E esse segmento entra em um loop e em cada iteração, ele chama o método move da BubbleView.

Agora, como veremos em um segundo, este método altera o local BubbleViews. E então, retorna verdadeiro ou falso, dependendo se o BubbleViews nova localização é ou não é ainda visível no ecrã. Em seguida, o código chama o ponto de vista aulas postar método invalidar.

Esta mensagem informa android para redesenhar esse ponto de vista e depois que o segmento vai dormir por um segundo antes de acordar e começar o processo mais uma vez. Agora eu vou passar por cima a maioria dos detalhes de como o BubbleView se move.

E eu vou concentrar-se em como ele é redesenhado. Assim, quando o fio de desenho chama o método pós invalidar, este diz que o Android BubbleView acha que precisa ser redesenhado. Se sim, então Android acabará por chamar o método BubbleViews onDraw.

Passando na tela, com o qual o BubbleView é desenhado. Vamos olhar para esse método. E como você pode ver, este método leva a tela passou para ele e chama seu método DrawBitmap, passando o bitmap para desenhar.

Passando nas coordenadas superior e esquerda da posição na qual desenhar o mapa de bits. E, finalmente, passar em um objeto de pintura que define os parâmetros de estilo para esta operação de desenho. Agora, se nós gostaríamos de realmente aumentar a frequência.

Com o que estamos redesenhando a bolha para torná-lo mais suave deslizar da tela. Então, nós pode querer usar uma tela e um SurfaceView, a fim de fazer isso. E como já referi anteriormente, SurfaceViews precisa, um fio não-UI separada na qual para fazer o seu trabalho.

Assim que as operações SurfaceView não vai interferir com as operações de segmento. Então, vamos falar mais sobre a classe SurfaceView. A SurfaceView administra uma área de desenho de baixo nível chamado de Surface. E esta superfície é uma área de desenho dedicado, que é posicionado dentro da hierarquia de vista aplicações.

Para definir um SurfaceView, você precisa criar uma classe personalizada, que é uma subclasse de SurfaceView. E esta classe personalizada deve, também deve implementar a SurfaceHolder.Interface de retorno de chamada. Para utilizar este novo SurfaceView, você precisa fazer duas coisas. Um, você precisa configurar o SurfaceView.

E dois, você precisa chamar a SurfaceView que você acabou de configuração. Vamos falar sobre cada uma dessas etapas, uma de cada vez. Para configurar o SurfaceView, primeiro você usa o método SurfaceViews getHolder adquirir SurfaceHolder do SurfaceView.

Em seguida, você registrar o SurfaceView para retornos de chamada SurfaceHolder. Ao chamar o método addCallback do SurfaceHolder. Agora estes métodos são uma, surfaceCreated que é chamado, quando a superfície da SurfaceView foi criado.

Até que este método é chamado você não pode desenhar na superfície. Ele não está pronto. Dois, surfaceChanged. Este método é chamado sempre que mudanças estruturais, como alterar o tamanho da superfície, ocorre.

E três, surfaceDestroyed. E este método é chamado logo antes de uma superfície é destruída. Uma vez que esse método retorna, você não pode mais chamar de operações que vai chamar na superfície. E a última etapa de configuração é criar a linha que será usada para a execução de operações de desenho neste SurfaceView.

E lembre-se de que os métodos de retorno de chamada SurfaceHolder geralmente será chamado a partir do thread principal não a partir de fios do SurfaceView. Então você tem que ter certeza que você sincronizar o acesso a todos os dados que é necessário para ambas as threads. Então, uma vez que você tenha configurado o SurfaceView você pode começar a desenhar nele.

Para desenhar, você primeiro adquirir um bloqueio na tela, chamando o método lockCanvas. Em seguida, você fazer o que desenhar operações que você quer fazer na tela. Por exemplo, chamando um método tela, como DrawBitmap. E por último, você desbloquear a tela, permitindo Android para atualizar a exibição.

E você vai fazer isso chamando o método unlockCanvasAndPost do SurfaceHolder. Então, vamos olhar para uma implementação diferente do nosso último exemplo de aplicação, chamada GraphicsBubbleCanvas Superfície View.   Então aqui está o meu dispositivo. E, em um momento, vou iniciar a aplicação GraphicsCanvasBubbleSurfaceView.

E quando o fizer, a aplicação irá iniciar e desenhar a bolha em um local selecionado aleatoriamente na tela. Mas desta vez, em vez de atualizar a cada segundo ou assim, esta aplicação irá tentar fazer o maior número de atualizações, uma vez que pode.

Além disso, o aplicativo também vai rodar a vista bolha para dar a aparência de que a bolha está girando através do espaço. Então aqui vai. E como você pode ver, a bolha é bem animar tanto movendo e girando enquanto flutua junto. Vamos olhar para o código-fonte para esta aplicação.

Então aqui está a aplicação GraphicsCanvasBubbleSurfaceView aberto no IDE. Agora vou abrir a atividade principal. E no onCreate, este código novamente carrega um bitmap do diretório de recursos. E, em seguida, usa esse bitmap para criar uma instância de uma classe de exibição personalizada chamado BubbleView. Vamos olhar para a classe BubbleView.

A classe BubbleView estende SurfaceView e implementa a SurfaceHolder.Interface de retorno de chamada. O construtivo para esta classe faz um monte de tarefas domésticas. E, em seguida, para baixo, para o final do método, há uma chamada para o método getHolder, que devolve uma SurfaceHolder.

O código tem que SurfaceHolder e registra este BubbleView para retornos de chamada. Vejamos o que acontece quando esses retornos finalmente chegar. Primeiro, vemos que, quando a superfície para a SurfaceView é criado, este código cria um novo tópico, e depois começa-lo. E o método de execução que thread depois entra em um loop.

E em cada iteração do loop, ele verifica se o segmento foi interrompido. E se não, em seguida, chama o método de movimento, que como antes move a opinião da bolha e retorna um booleano que indica se ou não o BubbleView deixou a tela.

Se estas verificações avaliar a verdade, o código tenta bloquear tela do SurfaceHolder. E se for bem sucedido, o código chama o método de passagem drawBubble na tela bloqueada. E então, finalmente, a aplicação desbloqueia a tela e permite Android para atualizar a exibição.

Vamos voltar para um segundo e olhar para o método drawBubble. Agora, este método, primeiro redesenha o fundo da tela, em seguida, ele gira a tela e, em seguida, ele redesenha a bolha na tela. .  