1
00:00:00,084 --> 00:00:08,593
[BLANK_AUDIO].

2
00:00:08,593 --> 00:00:11,347
Hi, I'm Adam Porter and this is

3
00:00:11,347 --> 00:00:17,090
Programming Mobile Applications for
Android Handheld Systems.

4
00:00:19,000 --> 00:00:23,870
Now, after an intent is broadcast it will
eventually be delivered to the appropriate

5
00:00:23,870 --> 00:00:30,210
broadcast receiver, through a call to be
broadcast receivers onReceive method.

6
00:00:31,250 --> 00:00:33,980
And this method has two parameters.

7
00:00:33,980 --> 00:00:37,360
One, the context in which the receiver is
running.

8
00:00:38,390 --> 00:00:41,590
And two, the intent that was broadcast.

9
00:00:43,140 --> 00:00:47,250
So there's some things to consider when
you're writing the code that handles

10
00:00:47,250 --> 00:00:53,150
incoming broadcasts.
First, to deliver a broadcast, Android may

11
00:00:53,150 --> 00:00:59,010
have to start a receiver's application
process, because it might not

12
00:00:59,010 --> 00:01:03,600
actually be running when the intent is
broadcast, and

13
00:01:03,600 --> 00:01:09,080
while on receive is running, that process
has high priority.

14
00:01:09,080 --> 00:01:12,160
So broadcasting an intent, especially if
it goes

15
00:01:12,160 --> 00:01:16,880
to multiple applications, can be a
relatively expensive operation.

16
00:01:18,398 --> 00:01:21,150
Second, the onReceive method runs in the

17
00:01:21,150 --> 00:01:24,800
main thread of its hosting process, and
like

18
00:01:24,800 --> 00:01:28,010
anything that you do on the main thread it
should

19
00:01:28,010 --> 00:01:31,480
be fairly short lived and it shouldn't
block the main thread.

20
00:01:31,480 --> 00:01:35,550
In particular if the processing you need
to

21
00:01:35,550 --> 00:01:39,480
do in response to the broadcast is time
consuming,

22
00:01:39,480 --> 00:01:41,600
then you should consider starting a
service to do

23
00:01:41,600 --> 00:01:44,840
that work rather than doing the work in
onReceive.

24
00:01:44,840 --> 00:01:49,850
In fact, that's exactly what the MMS
application does when an

25
00:01:49,850 --> 00:01:51,700
MMS message arrives.

26
00:01:51,700 --> 00:01:56,310
A broadcast receiver receives a broadcast
informing

27
00:01:56,310 --> 00:01:58,150
it that the MMS message has arrived.

28
00:01:59,370 --> 00:02:02,200
And in its onReceive method, when it gets

29
00:02:02,200 --> 00:02:07,600
called, it immediately passes the message
to another service

30
00:02:07,600 --> 00:02:09,370
that handles all the work of downloading
the

31
00:02:09,370 --> 00:02:13,650
message, storing it in a database and so
forth.

32
00:02:13,650 --> 00:02:14,950
Of course, we haven't talked about

33
00:02:14,950 --> 00:02:18,210
services much yet, but we'll get to them
in later lessons.

34
00:02:21,210 --> 00:02:24,580
A last issue to consider is that a
broadcast receiver

35
00:02:24,580 --> 00:02:29,510
is considered valid only as long as
OnReceive is running.

36
00:02:29,510 --> 00:02:32,640
In fact, once onReceive returns, Android

37
00:02:32,640 --> 00:02:37,810
will sometimes terminate the underlying
broadcast receiver.

38
00:02:37,810 --> 00:02:42,180
In particular, this, this means that
broadcast receivers can't start up

39
00:02:42,180 --> 00:02:46,940
operations that will need to call back to
the receiver asynchronously

40
00:02:46,940 --> 00:02:47,850
at a later time.

41
00:02:47,850 --> 00:02:52,940
And of course, that makes sense because
there's no guarantee that

42
00:02:52,940 --> 00:02:58,090
the broadcast receiver will even exist
when that call back occurs.

43
00:02:59,400 --> 00:03:03,380
Now examples of these asynchronous
callbacks include things like starting a

44
00:03:03,380 --> 00:03:09,920
dialogue, or starting an activity via the
start activity or result method.

45
00:03:11,120 --> 00:03:11,730
So,

46
00:03:11,730 --> 00:03:16,270
let's look at some more examples of
applications that use broadcast receivers.

47
00:03:21,180 --> 00:03:25,490
Here, I'll start up the compound broadcast
application.

48
00:03:26,850 --> 00:03:32,210
It has a button labeled Broadcast Intent,
which when pressed

49
00:03:32,210 --> 00:03:37,900
will use the send broadcast method to
broadcast a show toast intent.

50
00:03:38,960 --> 00:03:41,640
This time, however, there are three

51
00:03:41,640 --> 00:03:44,710
broadcast receivers that will receive this
intent.

52
00:03:46,000 --> 00:03:46,600
So now

53
00:03:46,600 --> 00:03:47,470
I'll press the button.

54
00:03:49,720 --> 00:03:54,840
And below you see a toast message from
receiver one, a

55
00:03:54,840 --> 00:04:00,250
second one from receiver two, and the
third one from receiver three.

56
00:04:05,800 --> 00:04:08,526
Because the compound broadcast application
used

57
00:04:08,526 --> 00:04:11,780
send to broadcast, the broadcasts were
sent

58
00:04:11,780 --> 00:04:14,240
out normally and that means that

59
00:04:14,240 --> 00:04:17,560
the arrival and processing order were
undefined.

60
00:04:18,840 --> 00:04:24,180
In this case, the broadcast happened to be
handled in one particular order.

61
00:04:24,180 --> 00:04:27,830
In other cases or on a different device

62
00:04:27,830 --> 00:04:31,440
or if Android changes in the future, that
order

63
00:04:31,440 --> 00:04:33,150
might be different.

64
00:04:33,150 --> 00:04:37,650
So if you really want the broadcast
receivers to receive broadcast

65
00:04:37,650 --> 00:04:41,820
in a particular order, or if you want each
broadcast receiver

66
00:04:41,820 --> 00:04:46,370
to have exclusive access to the intent
while it's being processed,

67
00:04:46,370 --> 00:04:50,210
then you'll want to broadca, you'll want
the broadcast to be ordered.

68
00:04:51,380 --> 00:04:55,620
And to, you'll do that by using a send
ordered broadcast method.

69
00:04:55,620 --> 00:04:56,120
And

70
00:04:57,750 --> 00:04:59,500
you can do that using some of the methods,

71
00:04:59,500 --> 00:05:03,030
some of the following methods from the
context class.

72
00:05:03,030 --> 00:05:07,020
The first sends an intent to broadcast
receivers

73
00:05:07,020 --> 00:05:10,590
that have a specified permission in
priority order.

74
00:05:11,670 --> 00:05:13,700
The second does the same thing,

75
00:05:13,700 --> 00:05:17,530
but provide additional parameters for
greater control.

76
00:05:17,530 --> 00:05:22,930
Let's look at some applications that use
these methods to send ordered broadcasts.

77
00:05:25,830 --> 00:05:30,850
Here, I'll start up the compound ordered
broadcast application.

78
00:05:32,360 --> 00:05:35,970
This application displays a button,
labeled Broadcast Intent.

79
00:05:37,110 --> 00:05:43,180
And when you press the button a show toast
intent is broadcast.

80
00:05:43,180 --> 00:05:46,373
For this application there are three

81
00:05:46,373 --> 00:05:50,905
registered broadcast receivers, of type
receiver

82
00:05:50,905 --> 00:05:58,160
one, receiver two and receiver three.
And each of these has a different

83
00:05:58,160 --> 00:06:04,270
priority for receiving the broadcast.
Receiver two has the highest priority,

84
00:06:07,650 --> 00:06:13,430
receiver one the next highest, and
receiver three has the lowest priority.

85
00:06:13,430 --> 00:06:18,850
So we expect the receivers to get the
broadcast in that order.

86
00:06:18,850 --> 00:06:22,560
Receiver two, receiver one, receiver
three.

87
00:06:22,560 --> 00:06:27,940
However, I put in some code, I put some
code in receiver one that

88
00:06:27,940 --> 00:06:32,990
aborts the broadcast.
So in this case only receiver two and

89
00:06:32,990 --> 00:06:37,290
then receiver one should receive the
broadcast.

90
00:06:37,290 --> 00:06:39,380
So let's see that in action.

91
00:06:40,810 --> 00:06:44,690
Now, I'll press the broadcast intent
button and

92
00:06:44,690 --> 00:06:47,680
you can see a toast message saying that

93
00:06:47,680 --> 00:06:51,420
the intent was received by receiver two,
and

94
00:06:51,420 --> 00:06:54,980
then another saying it was received by
receiver one.

95
00:06:54,980 --> 00:06:57,990
And apparently, poor receiver three gets
left

96
00:06:57,990 --> 00:06:59,420
out in the cold.

97
00:06:59,420 --> 00:07:02,150
Let's look at the source code for this
application.

98
00:07:04,310 --> 00:07:07,420
Now here I've got the application open in
the IDE.

99
00:07:08,620 --> 00:07:12,750
And I'll start by opening up the Android
manifest.XML file.

100
00:07:15,030 --> 00:07:22,060
And as you can see I statically registered
receiver two with a priority of ten.

101
00:07:24,120 --> 00:07:28,380
And receiver three I've registered with a
priority of one.

102
00:07:28,380 --> 00:07:28,880
Now

103
00:07:30,490 --> 00:07:34,915
back in the main activity, the code
creates an instance of

104
00:07:34,915 --> 00:07:40,160
Receiver1, then creates an intentFilter
for the show

105
00:07:40,160 --> 00:07:45,580
toast intent and then sets the priority to
three.

106
00:07:45,580 --> 00:07:50,030
So any Receiver2 instance has priority
ten.

107
00:07:50,030 --> 00:07:54,270
This Receiver1 instance has priority
three,

108
00:07:55,570 --> 00:07:58,610
and any receiver three instance has
priority one.

109
00:08:00,180 --> 00:08:05,550
Now, when the broadcast intent button is
pressed, the listener calls send

110
00:08:05,550 --> 00:08:10,330
ordered broadcast, passing in a new show
toast intent.

111
00:08:11,910 --> 00:08:16,980
This intent is first received by a
receiver two instance, and

112
00:08:16,980 --> 00:08:20,530
then by a receiver one instance that was
created in this file.

113
00:08:21,960 --> 00:08:27,284
Let's open the receiver one code.
Now here in on receive you see that the

114
00:08:27,284 --> 00:08:33,310
code checks to see whether this is an
ordered broadcast.

115
00:08:33,310 --> 00:08:38,910
And if so, it calls abort broadcast, which
consumes the

116
00:08:38,910 --> 00:08:44,820
broadcast, and in this case, prevents it
from being sent on to receiver three.

117
00:08:47,480 --> 00:08:52,470
Now let's also look at a slightly more
complicated use of ordered broadcast.

118
00:08:52,470 --> 00:08:58,360
In this application, called Ordered
Broadcast with Result Receiver,

119
00:08:58,360 --> 00:09:01,450
we'll see that a single toast message is
displayed, that

120
00:09:02,820 --> 00:09:07,520
shows all the broadcast receivers that
receive this intent

121
00:09:07,520 --> 00:09:10,740
and that indicates the order in which they
received it.

122
00:09:12,380 --> 00:09:12,900
Now here,

123
00:09:12,900 --> 00:09:14,160
I'll start the application.

124
00:09:15,990 --> 00:09:22,660
Now I'll press it's Broadcast Intent
button and there's the toast message.

125
00:09:22,660 --> 00:09:27,950
It shows that receiver two received the
intent, then receiver

126
00:09:27,950 --> 00:09:32,870
one, then receiver three.
Let's look at the source code.

127
00:09:35,500 --> 00:09:38,410
Now here's the application open in the
IDE.

128
00:09:40,170 --> 00:09:43,400
Now, I'll open the main activity and go

129
00:09:43,400 --> 00:09:46,090
to the listener for the broadcast intent
button.

130
00:09:46,090 --> 00:09:46,590
As

131
00:09:48,830 --> 00:09:54,062
you can see, this code uses the second
form of the send broadcast method.

132
00:09:55,300 --> 00:09:57,986
One of the interesting parameters of this
method is

133
00:09:57,986 --> 00:10:03,390
a broadcast receiver, I'll call it the
result receiver

134
00:10:03,390 --> 00:10:06,270
that will receive the intent after all the
other

135
00:10:06,270 --> 00:10:10,180
broadcast receivers have gotten their
chance to receive it.

136
00:10:11,380 --> 00:10:14,100
This is useful if the initial broadcast

137
00:10:14,100 --> 00:10:16,295
receivers compute some result.

138
00:10:17,740 --> 00:10:23,020
Because that result will then be available
to this last receiver, and it can get

139
00:10:23,020 --> 00:10:28,090
that result by calling get result data, as
we see here.

140
00:10:30,130 --> 00:10:34,260
Now let's take a look at one of the
broadcast receiver classes to see

141
00:10:34,260 --> 00:10:36,980
how they compute the result that this

142
00:10:36,980 --> 00:10:41,100
result receiver finally displays in the
toast message.

143
00:10:43,610 --> 00:10:48,590
Now, here's the receiver one class.
And as you can see, it's on receive

144
00:10:48,590 --> 00:10:55,370
method, calls get result data, to get the
current result data.

145
00:10:55,370 --> 00:10:58,510
And then it tacks on its own string at the
end.

146
00:10:59,550 --> 00:11:05,070
And then saves the new string by calling
set result data, now

147
00:11:05,070 --> 00:11:10,240
since all the broadcast receivers do this
in turn, the final

148
00:11:10,240 --> 00:11:15,180
result data is a single string showing
which receivers received

149
00:11:15,180 --> 00:11:19,610
the intent, and the order in which they
received it.

150
00:11:19,610 --> 00:11:20,110
The

151
00:11:22,620 --> 00:11:27,800
last kind of broadcasts I'll talk about
today are sticky broadcasts.

152
00:11:27,800 --> 00:11:31,442
As I said earlier, non-sticky broadcasts
indicate that

153
00:11:31,442 --> 00:11:34,870
something's happened at the specific
moment in time.

154
00:11:35,940 --> 00:11:37,970
They announce events.

155
00:11:37,970 --> 00:11:41,210
So once the event is over, it's over.

156
00:11:41,210 --> 00:11:43,770
Android disposes of the event and moves
on.

157
00:11:46,500 --> 00:11:51,020
If a broadcast receiver wasn't registered
to receive an intent when

158
00:11:51,020 --> 00:11:56,720
it happened, say yesterday, then it
shouldn't be told about it now.

159
00:11:56,720 --> 00:12:00,740
Because, for example, it might think that
the event just happened.

160
00:12:00,740 --> 00:12:04,580
And that could lead to all kinds of timing
problems and other difficulties.

161
00:12:05,620 --> 00:12:11,640
Other events however, indicate state
changes that may persist over time.

162
00:12:12,900 --> 00:12:15,360
Broadcast receivers that want to know
about

163
00:12:15,360 --> 00:12:19,210
the current device state, for example,
will still

164
00:12:19,210 --> 00:12:22,810
want that information even if they weren't
registered

165
00:12:22,810 --> 00:12:26,640
to be notified when that particular state
changed.

166
00:12:26,640 --> 00:12:29,600
For example, if the battery level goes
very

167
00:12:29,600 --> 00:12:33,798
low Android will broadcast this fact to
the system.

168
00:12:33,798 --> 00:12:38,680
Good applications will want to be good
device citizen and

169
00:12:38,680 --> 00:12:45,420
not do battery consuming operations when
the device is in this low state.

170
00:12:45,420 --> 00:12:47,470
So in this case, if a new application

171
00:12:47,470 --> 00:12:50,880
starts up and registers to hear about the
battery

172
00:12:50,880 --> 00:12:54,970
state, that application needs to know
right now

173
00:12:54,970 --> 00:12:56,900
if the device is in the low battery state.

174
00:12:57,950 --> 00:13:03,940
And because of this, Android broadcasts
that battery low intent as

175
00:13:03,940 --> 00:13:08,820
a sticky broadcast, so sticky intents are
cached by Android,

176
00:13:09,820 --> 00:13:14,770
and sticky broadcasts of a given intent
overwrite any cached

177
00:13:14,770 --> 00:13:19,250
values from previous sticky broadcasts of
a matching intent.

178
00:13:20,500 --> 00:13:24,770
When a broadcast receiver is dynamically
registered, any

179
00:13:24,770 --> 00:13:29,110
cached intents that match its intent
filter will

180
00:13:29,110 --> 00:13:31,150
be broadcast to it.

181
00:13:31,150 --> 00:13:34,730
In addition, one matching cached intent
will

182
00:13:34,730 --> 00:13:37,970
be returned to the caller of registered
receiver.

183
00:13:37,970 --> 00:13:43,300
Now similar to what we saw with non-sticky
broadcasts, sticky

184
00:13:43,300 --> 00:13:49,090
broadcasts can be sent normally, that is
without a defined order, or

185
00:13:49,090 --> 00:13:54,340
sequentially, in priority order.
Normal sticky broadcasts can

186
00:13:54,340 --> 00:13:59,450
use this method.
And ordered sticky broadcasts

187
00:13:59,450 --> 00:14:04,490
can use this method.
And finally, applications that want to

188
00:14:04,490 --> 00:14:12,050
broadcast sticky intents must have the
broadcast_sticky permission.

189
00:14:12,050 --> 00:14:16,210
Let's look at an example application that
uses sticky broadcasts.

190
00:14:16,210 --> 00:14:19,720
Now here, I'll run the sticky intent

191
00:14:19,720 --> 00:14:24,430
application in the emulator.
I've also opened

192
00:14:24,430 --> 00:14:29,120
a terminal window, and started a Telnet
session with that emulator.

193
00:14:30,720 --> 00:14:35,610
Now, I'll start the application, which

194
00:14:35,610 --> 00:14:39,710
displays the current battery level, and
displays the

195
00:14:39,710 --> 00:14:44,760
string, reading may be stale.
And this last string just

196
00:14:44,760 --> 00:14:47,910
indicates that the battery level reading
comes from

197
00:14:47,910 --> 00:14:52,150
a cached, sticky broadcast, not from a
fresh broadcast.

198
00:14:53,890 --> 00:14:57,300
If I now go to the terminal window and
change the battery

199
00:14:57,300 --> 00:15:03,820
level, a new intent will be broadcast
reflecting the updated battery level.

200
00:15:03,820 --> 00:15:11,440
So now I'll type power capacity 95 and

201
00:15:13,200 --> 00:15:13,820
hit return.
As

202
00:15:16,760 --> 00:15:19,640
you can see the display has been updated.

203
00:15:20,900 --> 00:15:24,830
And that display text has changed to
indicate that broadcast

204
00:15:24,830 --> 00:15:30,570
receiver can distinguish between fresh
broadcasts and a cached one.

205
00:15:31,960 --> 00:15:33,930
Let's look at the source code for this
application.

206
00:15:33,930 --> 00:15:34,430
Now

207
00:15:36,390 --> 00:15:37,920
here I'm in the IDE.

208
00:15:39,380 --> 00:15:43,100
And now I'll open the main activity for
this application.

209
00:15:43,100 --> 00:15:49,950
It calls register receiver and passes in a
broadcast receiver as defined in line.

210
00:15:51,830 --> 00:15:56,118
Let's look at the onReceive method of that
broadcast receiver.

211
00:15:56,118 --> 00:16:04,052
First, it checks to see whether it's
receiving a battery_changed intent.

212
00:16:04,052 --> 00:16:08,498
If so, it determines whether the broadcast
is

213
00:16:08,498 --> 00:16:14,960
new or cached, by calling is initial
sticky broadcast.

214
00:16:14,960 --> 00:16:18,830
This method returns true if this intent is
a cached value.

215
00:16:18,830 --> 00:16:23,380
And after that the code sets the text to
display.

216
00:16:29,720 --> 00:16:33,320
So that's all for this lesson on broadcast
receivers.

217
00:16:33,320 --> 00:16:39,880
Please join me next time, when we'll talk
about Threads, AsyncTasks, and Handlers.

218
00:16:39,880 --> 00:16:41,606
See you then.

219
00:16:41,606 --> 00:16:46,100
[BLANK_AUDIO]

